#+title: Background

* K-S test
The Kolmogorov-Smirnov test for two samples is a non-parametric statistical test used to compare those samples and assess whether they were extracted from the same continuous distribution.

To do so, the test computes the maximal distance between the cumulative empirical distribution functions (abbreviated ECDF) of the two samples, a function that associates to each observation x_i the sum of the ratios between the absolute value frequency and the cardinality of the sample.

If such maximal distance is bigger than the critical value /D/, where
# formula
the Kolmogorov-Smirnov test rejects the null hypothesis that the two samples are extracted from the same distribution.

The parameter $\alpha$ that appears in the formula for the critical value D is the significance level of the test, which indicates the maximum probability that the test will result in a false negative (the two samples come from the same distribution, but the test fails to detect it).
The parameter /n/ and /m/ represent the cardinality of the two samples.
# hai usato la libreria scipy.

* JMT & performance evaluation of network queues
Performance Evaluation is the quantitative and qualitative study of systems to evaluate, measure, predict and ensure target behaviors and performances.

To evaluate the performances of a system, we usually adopt or construct a \textit{model} of it in order to make the evaluation easier.

A \textit{Queuing network model} is a particular approach to modelling computer systems in which the system is presented as a \textit{network of queuing stations}[cit lazowska].

A \textbf{Queuing station} is a collection of \textit{service centers}, which represents system resources, and \textit{jobs}, which represent the unit of work that the service center has to perform.

When all service centers are busy processing a job and other jobs arrive at the queuing station, they are put into an ordered \textit{queue} (if available) to be processed later.

** Model parameters
# - service time (parameter) (service demand)
# - workload intensity
To define the behavior of the jobs inside the model, like how they move between service centers or how long it takes for the service center to perform the job, we use a set of model parameters, of which some are listed here:
#+begin_src latex
\begin{itemize}
  \item The number of service centers in each queue.
  \item For each service center, its \textit{service time}, or the time needed to perform the job.
  \item The \textit{visits} of each queue, which represents the average number of times a job will visit that resource while inside the system.
\end{itemize}
#+end_src

When the jobs considered involve different service times or may follow a different path inside the system, they may be introduced as different \textit{job classes}.
In case multiple jobs classes have to be considered, the service time and the visits for each of the classes and each of the service centers will have to be provided as parameters of the model.

** performance indexes
Once the parameter of the model have been provided, we can use it to evaluate the performances of the system by computing its \textit{performance measures}.
Some of these performance measures are shown in the following.

- utilization
- throughput
- response time

*** Utilization
Is computed for each queuing station and represents the proportion of time that the station has been occupied performing a job (instead of not doing anything).
Once the utilization gets to 100%, the queuing station is said to be \textit{unstable}, since additional jobs arriving will have to wait more and more before they can be performed.

*** Response time
Is computed either for each queuing station or for the entire system and represents the average time spent in the queuing station by a job, both queuing and being performed.

*** Throughput
Is computed either for each queuing station or for the entire system and represents the average rate (expressed in $\frac{jobs}{seconds}$) at which customers pass through the queuing station/the system.

** Concepts
# - queuing networks
# - jobs
# - jobs classes

** JMT & JSimGraph
#+begin_src latex
\textit{Java Modelling Tools} (JMT) is a free and open source suite consisting of multiple tools for performance evaluation and modelling of computer and communication systems [cit jmt manual]; it was founded in Politecnico di Milano, and is used nowadays to teach about performance evaluation in some computer engineering courses.
%#TODO: cit jmt

One of its commonly used tools is \textit{JSimGraph}, a GUI frontend to the JMT \textit{simulation engine} that allows for the construction of a model and its performance evaluation through simulation.

The jobs to be elaborated by the modeled system can either be provided by the user or be generated by the system according to a reference distribution.

If generated by the user, they have to be provided in the form of a single file for each job class containing a list of values that each represent the time between the arrival of the next job and the previous one.

The definition of the model is done through a graphical interface where the user can define their own queuing stations and connect them to each other, as well as define the classes of jobs to be handled by the queuing station and how each of them is routed throughout the system.

Each queuing station is defined through the parameters previously shown, but since the routing of the jobs is defined with the knowledge of the whole system in mind the \textit{visits} do not have to be defined for each queuing station.
#+end_src

*** Simulation
To provide the performance indexes shown above, JSimGraph simulates the flow of jobs in the system; while these are being processed, it computes each index requested by the user by considering increasingly narrower confidence intervals until one is obtained that fits the user.

The confidence interval used by default will stop the simulation once it is sure to contain the real value for the performance index 99\% of the times.

In Figure~[] is shown a sample of the output of a simulation made with JSimGraph, which shows the response time  of the \textit{CPU} station of the system.
The blue line in the graph shows the value computed by the tool for the response time as simulation progresses, while the red lines show the confidence intervals for the measurement.

*** What-if analysis
An interesting tool bundled with JSimGraph is the \textit{What-if analysis}.

A What-If Analysis consists of a series of simulations in which one or more control parameters are varied over a specified range; this allows the observation of system behavior under a spectrum of conditions, unlike the
single simulation run where the system is observed under a fixed set of parameters.

Once the what-if analysis is enabled, it is made possible for the user to specify the range of the variation on each parameter and to specify the number of steps in which such variation shall happen.
Then, for each of the step provided, the What-if analysis tool performs a simulation with the newly updated parameter.

In Figure~[] is shown the output of a What-if analysis performed for the response time of station \textit{CPU} while changing the service time of all the classes of the system to be 200\% of their original service time in three steps.

The graph for the What-if analysis shows the

*** Conclusion
To know about additional features of the JSimGraph tool or the other tools offered by the JMT suite, please refer to [cit manual]
