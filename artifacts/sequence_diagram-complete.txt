#title This is a title
actor "User" as U
participant "Manager" as M
participant "Hospital" as H
participant "Patient" as P
participant "Admission" as A
participant "Interaction" as I
#Alice->Bob:Click and drag to create a request or\ntype it in the source area to the left
#Alice<--Bob:drag to move
#note over Bob,Double click to edit text:Click Help menu for **instructions** and **examples**
#Bob->(3)Double click to edit text:non-instantaneous message

U-->*M:Manager(configuration)
U-->*H:Hospital(manager, **patient_arrivals**)
activate H
loop for each patient in patient_arrivals
H->M:get_patient_class()
deactivate H
activate M
M-->H:patient_class
deactivate M
activate H
H-->*P:Patient(manager, patient_class)
deactivate H
activate P
P->M:get_admission_class()
deactivate P
activate M
M-->P:admission_class
deactivate M
activate P
P-->*A:Admission(manager, patient_class, admission_class)

loop for each interaction_type in InteractionKind
activate A
A->M:get_interaction_generator(patient_class, admission_class, **interaction_type**)
deactivate A
activate M
M-->A:interaction_generator
deactivate M
activate A
opt depending on the interaction being considered
note over A: check for any decision to be\nmade for the interaction **interaction_type**
A->M:get_probability(patient_class, admission_class, Probability.*)
deactivate A
activate M
M->A: probability
deactivate M
activate A
A->A: check_probability(probability)
deactivate A
end 
activate A
A->A:obtains duration\nof the interaction
A->*I:Interaction(manager, patient_class, admission_class, duration)
deactivate A
end
P->M: get_probability(patient_class, Probabilities.P_SUCC_ADMISSION)
deactivate P
activate M
M->P: probability_admission
deactivate M
activate P
P->P: check_probability(probability_admission)
deactivate P
note over P: if this check results in another admission,\nrepeat the creation process above
end
U->H:get_events()
activate H
loop for each user requested
H->P:get_events()
activate P
loop for each admission created
P->A:get_events()
activate A
loop for each interaction_type in InteractionKind
A->I:get_events()
activate I
I->I:generates the events
I-->A: events_trace
deactivate I
end
A->A: aggregate the event traces
A-->P: events_trace
deactivate A
end
P->P: aggregate the event traces
P-->H: events_trace
deactivate P
end
H->H: aggregate the event traces
H-->U: events_trace
deactivate H
